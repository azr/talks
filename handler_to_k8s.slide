From http handler to kubernetes

2 Apr 2016
#Tags: kubernetes, http, google, cloud, platform, heroku

Adrien Delorme
Rive Paris
http://www.rive.world/
http://github.com/azr
http://github.com/azr/generators
http://github.com/azr/talks
@gratator



* Go in prod ?

* Go in prod !

.link https://eng.uber.com/go-geofence/ Über - How we built uber engineering’s highest query per second service using go
.link https://talks.golang.org/2013/oscon-dl.slide Google - dl.google.com: Powered by Go


And others !
.link https://github.com/golang/go/wiki/GoUsers https://github.com/golang/go/wiki/GoUsers

* HTTP handling in go


* HTTP handling in go - Basics

.play handlers_to_k8s/empty/handler.go

* HTTP handling in go - Real life

* HTTP handling in go - Real life

.play handlers_to_k8s/service/handler.go  /START OMIT/,/END OMIT/

* Can't this be simple ?

* HTTP handling in go - Code generation

Create User


* But what does core job really look like ?

.code handlers_to_k8s/generation/handler.go  /BEFORE_USER_CREATE OMIT/,/AFTER_USER_CREATE OMIT/

* ... And how do I get the request ?

.code handlers_to_k8s/generation/handler.go  /START_REQ OMIT/,/BEFORE_USER_CREATE_GENERATE OMIT/


* HTTP handling in go - Gode Generation
.code handlers_to_k8s/generation/handler.go  /BEFORE_USER_CREATE_GENERATE OMIT/,/USER_CREATE_FIRST_LINE OMIT/


* HTTP handling in go - Gode Generation
The jobs:
.code handlers_to_k8s/generation/handler.go  /BEFORE_USER_CREATE_GENERATE OMIT/,/USER_CREATE_FIRST_LINE OMIT/
.code handlers_to_k8s/generation/handler.go  /AFTER_USER_CREATE OMIT/,/USER_GET_FIRST_LIST OMIT/
Run "go generate"
.code handlers_to_k8s/generation/handler.go  /BEFORE_INIT OMIT/,/AFTER_INIT OMIT/

* Code Generated - show time

* Any question so far ?

.image handlers_to_k8s/gen_all_the_things.jpg

* Where to run those handlers ?

* When it's a line that calls a backend service
- Appengine
- Heroku
- Others
* But sometimes it's not that simple

* Other cases - Rive
.image handlers_to_k8s/screen_hotbase.png _ 800

* We chose Kubernetes

* 
.image handlers_to_k8s/kubernetes-580px.jpeg
.caption A.K.A *k8s*

* How we use it ?

* Git flow

- Code your exotic program or feature
- Submit code review

--> For every git push tests are run

* When code is merged

- re run tests
- build executable

* Deploy

* Deploy - init

- dockerise executable
- push image to private repository

* Deploy - create the replication controller

    #!/bin/bash
    cat <<EOF
    apiVersion: v1
    kind: ReplicationController
    metadata:
      name: rtpush-${GIT_SHA}
    spec:
      replicas: ${NB_REPLICAS}















    EOF

* Deploy - define the template of a pod

    #!/bin/bash
    cat <<EOF
    apiVersion: v1
    kind: ReplicationController
    metadata:
      name: rtpush-${GIT_SHA}
    spec:
      replicas: ${NB_REPLICAS}
      selector:
        app: rtpush
        deployment: ${GIT_SHA}
      template:
        metadata:
          name: rtpush-${GIT_SHA}
          labels:
            app: rtpush
            deployment: ${GIT_SHA}
        spec:
          containers: #pods of the rc
          - name: rtpush
            image: gcr.io/rive/rtpush:${GIT_SHA}
            ports:
            - containerPort: 8080
    EOF

* Deploy - define limits of a pod

- number of cpu needed
- max mem use per pod

* Deploy - rolling update

  $ kubectl rolling-update ${PREVIOUS_RC_NAME} -f rc-rtpush.json

* Deploy - rolling update output

  $ kubectl rolling-update rtpush-b185186 -f rc-rtpush.json
  Created rtpush-new
  Scaling up rtpush-new from 0 to 1, scaling down rtpush-b185186  from 1 to 0 (keep 1 pods 
  available, don't exceed 2 pods)

  Scaling rtpush-new up to 1

  Scaling rtpush-b185186 down to 0

  Update succeeded. Deleting rtpush-b185186 replicationcontroller "rtpush-b185186"
  rolling updated to "rtpush-new"

It's live !

* Deploy - create the service

  ---
    kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "rtpush"
      labels:
        app: "rtpush"
    spec:
      type: "LoadBalancer"
      ports:
        -
          name: "http"
          port: 80
          targetPort: 8080
        -
          name: "https"
          port: 443
          targetPort: 4443
      selector:
        app: "rtpush"
      loadBalancerIP: "SOME_IP"
It's reachable !
